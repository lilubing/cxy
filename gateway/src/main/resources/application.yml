project-name: '@project.artifactId@'
server:
  port: 8030
  max-http-header-size: 1048576 #bytes
  session:
    cookie: SESSION2

spring:
  application:
    name: cxy-gateway
  profiles:
    # 指定配置
    # route_simple：简单尝试
    # route_stripPrefix：截取请求
    # route_uri：转发指定地址并传入参数
    # route_addRequestParameter：转发指定服务并传入参数
    # route_hystrix：熔断
    # route_requestRateLimiter：限流
    # route_all：综合
    active: route_simple

---

spring:
  # 配置文件名称，用来标识不同环境的配置。由 spring.profiles.active 的值来决定使用哪组配置。
  ## 简单尝试
  profiles: route_simple
  application:
    # 应用名称
    name: gateway # 不能用占位符，否则出现识别不了 eureka的问题 /${project-name}/
  cloud:
    gateway:
      discovery:
        locator:
          # 是否和服务注册与发现组件结合，设置为 true 后可以直接使用应用名称调用服务
          enabled: false
          # 服务名小写
          lower-case-service-id: true
      # 路由（routes：路由，它由唯一标识（ID）、目标服务地址（uri）、一组断言（predicates）和一组过滤器组成（filters）。filters 不是必需参数。）
      routes:
        - id: mybatis-web
          # 目标服务地址（uri：地址，请求转发后的地址）
          uri: lb://mybatis-web
          #uri: http://localhost:8090/cxy-web
          #uri: http://www.baidu.com
          # 路由条件（predicates：断言，匹配 HTTP 请求内容）
          predicates:
            ## 转发地址格式为 uri/routeAll，/all 部分会被下面的过滤器给截取掉
            - Path=/mybatis-web/**
        # 路由标识（id：标识，具有唯一性）   综合
        - id: oauth2-authorization-server
          # 目标服务地址（uri：地址，请求转发后的地址）
          uri: lb://oauth2-authorization-server
          #uri: http://localhost:8090/cxy-web
          #uri: http://www.baidu.com
          # 路由条件（predicates：断言，匹配 HTTP 请求内容）
          predicates:
            ## 转发地址格式为 uri/routeAll，/all 部分会被下面的过滤器给截取掉
            - Path=/oauth2-authorization-server/**
            ## 匹配 GET 请求
            #- Method=GET
          # 过滤器（filters：过滤器，过滤规则）
          #filters:
            ## 截取路径位数
            #- StripPrefix=1
            ## 添加指定参数
            #- AddRequestParameter=pass, yes
  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: 'http://localhost:8030/oauth2-authorization-server/rsa/publicKey' #配置RSA的公钥访问地址

eureka:
  instance:
    # 使用 ip 代替实例名
    prefer-ip-address: true
    # 实例的主机名
    hostname: ${spring.cloud.client.ip-address}
    # 实例的 ID 规则
    instance-id: ${spring.application.name}:${spring.cloud.client.ip-address}:${spring.application.instance_id:${server.port}}
    #服务刷新时间，每隔这个时间会主动心跳一次
    lease-renewal-interval-in-seconds: 3
    #服务过期时间,超过这个时间没有接收到心跳EurekaServer就会将这个实例剔除
    lease-expiration-duration-in-seconds: 10
  client:
    healthcheck:
      enabled: true
    #serviceUrl:
    #  defaultZone: http://user:password1236@localhost:8761/eureka
    fetch-registry: true #定期更新eureka server拉去服务节点清单，快速感知服务下线
    registry-fetch-interval-seconds: 5  #eureka client刷新本地缓存时间，默认30s
    service-url:
      defaultZone: http://user:password1236@localhost:8761/eureka

#logging
logging:
  config: classpath:logback-spring.xml
  #file:
    #name: application.log
  level:
    com.netflix: DEBUG

hystrix:
  command:
    default:
      execution:
        timeout:
          enabled: true
        isolation:
          thread:
            # hystrix 超时时间最好大于Ribbon的超时时间
            timeoutInMilliseconds: 360000
ribbon:
  #请求处理的超时时间
  ReadTimeout: 120000
  #请求连接的超时时间
  ConnectTimeout: 120000
  MaxAutoRetries: 1 #同一台实例最大重试次数,不包括首次调用
  MaxAutoRetriesNextServer: 1 #切换实例的重试次数
  OkToRetryOnAllOperations: false  #是否所有操作都重试


#开启actuator管理api，后面要关闭
management:
  endpoints:
    web:
      exposure:
        include: "*"

oauth2:
  common:
    jwtSigningKey: 123
  client:
    oauth2:
      cxy-webview:
        client-id: c2
        client-secret: spring

#若要作为 ResourceServer 必须注释 yaml security.oauth2, permitAuthenticationFilter @Component 必须有单独的 ResourceServer
auth-server: http://sso.5itrip.com:8050/oauth2-authorization-server
#auth-server: http://sso.5itrip.com:8050/auth
resources-server: http://sso.5itrip.com:8060/oauth2-resource-server

secure:
  ignore:
    urls: #配置白名单路径
      - "/actuator/**"
      - "/auth/oauth/token"
      - "/oauth2-authorization-server/**"